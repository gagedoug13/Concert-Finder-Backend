{"version":3,"sources":["neighborhoodjamz2.png","components/Address.js","components/Date.js","components/EventCard.js","components/NoResultsPage.js","components/EventContainer.js","components/DisplayEvents.js","components/Main.js","components/LandingPage.js","components/Logo.js","App.js","index.js"],"names":["module","exports","Address","props","className","action","onSubmit","getGeoFromAddress","latitude","target","rel","href","longitude","src","type","name","placeholder","onClick","getGeoFromGeoButton","Date","id","onChange","clickHandler","to","lat","date","getMetroAndEvents","EventCard","event","start","toString","slice","performance","length","displayName","venue","uri","distance","split","NoResultsPage","EventContainer","console","log","events","map","x","key","DisplayEvents","filterEventsByMilage","totalEvents","filteredEvents","userInput","value","day","left","right","middle","Math","floor","push","setState","eventsByMilage","originalEvents","state","this","selected","Component","Main","alert","fetch","then","response","json","data","error","daysArray","breakUpByDay","sortEachDay","days","item","lng","sort","a","b","lat1","lon1","lat2","lon2","unit","radlat1","PI","radlat2","theta","radtheta","dist","sin","cos","acos","bind","navigator","geolocation","getCurrentPosition","position","coords","message","document","querySelector","innerHTML","preventDefault","addressParameter","searchBar","path","render","Logo","alt","neighborhoodJamz","App","exact","component","LandingPage","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.67ab37b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/neighborhoodjamz2.28860f51.png\";","import React from 'react'\n\n\nexport default function Address(props) { \n\n    return (\n        <div className='addressDiv'>\n            <div className='addressFormDiv'>\n            <form action='...' className='addressForm' onSubmit={props.getGeoFromAddress} >\n                {props.latitude ? \n                <a target='_blank'\n                rel=\"noopener noreferrer\"\n                href={'http://maps.google.com/?ll=' + props.latitude + ',' + props.longitude}>\n                <img className='locationIcon' src='https://media.giphy.com/media/5dUpIQwwiHn2wQh10Z/giphy.gif'></img></a>\n\n                : \n                \n                null}\n                <p className='addressMessage'></p>\n                <input className='addressBar'\n                       type='text'\n                       name='searchBar'\n                       placeholder='Enter an address'>\n                </input>\n            </form>\n            </div>\n                <p className='locationOption'>or</p>\n                <button onClick={props.getGeoFromGeoButton} className='addressButton' type=\"submit\">Use My Location</button>\n        </div>\n    )\n}\n","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nexport default function Date(props) {\n    \n    return (\n        <div className='dateDiv'>\n            <form >\n                <p className='dateMessage'>Please select a day.</p>\n                <input className='dateInputBar'\n                        id='date'\n                       name='dateInput' \n                       onChange={props.clickHandler} \n                       type='date'/>\n                <Link to='/events'>\n                {props.lat && props.date ?\n                <button onClick={props.getMetroAndEvents}\n                        className='dateButton'\n                        type='submit'\n                        name='addressButton'\n                        >GO</button>\n                        : null}\n                </Link>\n                \n            </form>\n        </div>\n    )\n}\n","import React from 'react'\n\nexport default function EventCard(props) {\n    return ( \n        <div className='cardDiv'>\n            <div className=\"row\">\n                <div className=\"col-sm-6\">\n                    <div className=\"card\">\n                        <div className=\"card-body\">\n                            <p className='cardDate'>{new Date(props.event.start.date).toString().slice(0,10) + ', ' + new Date(props.event.start.date).toString().slice(11,15)}</p>\n                            <h5 className=\"card-title\">{props.event.performance.length ? props.event.performance[0].displayName : 'Unknown Artist'}</h5>\n                            <p>at</p>\n                            <p className=\"card-text\">{props.event.venue.displayName}</p>\n                            <a className=\"btn btn-primary\" target='_blank' href={props.event.uri}>More info</a>\n                            <p className=\"distanceTag\">{props.event.distance == null ? 'unknown' : \n                            props.event.distance.toString().split('').slice(0,4)} mi</p>\n                        </div>\n                    </div>\n                </div>\n            </div> \n        </div>\n    )\n}\n\n\n\n","import React from 'react'\n\nexport default function NoResultsPage() {\n    return (\n        <div className='loadingDiv'>\n    \n        </div>\n    )\n}\n","import React from 'react'\nimport EventCard from './EventCard'\nimport NoResultsPage from './NoResultsPage'\n\nexport default function EventContainer(props) {\n\n\n    return (\n        <div className='eventContainerDiv'>\n        {console.log(props.events, 'from card container.')}\n         \n            {props.events ?\n            props.events.map(event => {\n                return (\n                    event.map(x => {\n                        return (\n                            <div key={x.id}>\n                                <EventCard event={x} /> \n                            </div>\n                        )\n                    })\n                )\n            }) : null\n        }               \n               \n        </div>\n    )\n}\n\n\n\n","import React, { Component } from 'react'\nimport EventContainer from './EventContainer'\nimport NoResultsPage from './NoResultsPage'\n\nexport default class DisplayEvents extends Component {\n    constructor(props){\n        super(props)\n            this.state = {\n                eventsByMilage: null,\n                originalEvents: null\n        }\n    }\n\n\n\n    componentDidUpdate() {\n        if (this.props.totalEvents !== this.state.originalEvents) {\n            this.filterEventsByMilage()\n        }\n    }\n    \n\n    filterEventsByMilage = (event) => {\n        let totalEvents = this.props.totalEvents\n        let filteredEvents = []\n\n        console.log(this.props.totalEvents, 'the events as they come into the function')\n        let userInput = 50\n        if (event) {\n            userInput = event.target.value.slice(0,2)\n        }\n       \n        for (let day of totalEvents) {\n            let left = 0\n            let right = day.events.length \n            while (left < right) {\n                let middle = (left + Math.floor((right - left) / 2))\n                if (day.events[middle].distance > userInput) {\n                    right = middle\n                } else {\n                left = middle + 1\n                }\n            }\n            console.log(day.events, 'in the function')\n            filteredEvents.push(day.events.slice(0, left))\n        }\n    \n        this.setState({\n            eventsByMilage: filteredEvents,\n            originalEvents: this.props.totalEvents\n        })\n    }\n\n    render() {\n        // console.log(this.props.totalEvents)\n        return (\n            <div className='displayEventsDiv'>\n                {this.props.totalEvents ?\n                <div className='filterForm'>\n                <label className='filterLabel' >See concerts within:</label>\n        \n                <select id=\"filter\" onChange={this.filterEventsByMilage}>\n                <option placeholder=\"1 mile\">1 mile</option>\n                <option placeholder=\"5 miles\">5 miles</option>\n                <option placeholder=\"10 miles\">10 miles</option>\n                <option placeholder=\"25 miles\">25 miles</option>\n                <option selected placeholder=\"50 miles\">50 miles</option>\n                </select>\n            </div>\n            \n            : <h1 className='gettingEvents'>getting events...</h1>\n        }\n\n        \n\n        {this.state.eventsByMilage ?\n        <EventContainer events={this.state.eventsByMilage} />\n    : <NoResultsPage />}\n              \n              \n                \n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport Address from './Address'\nimport Date from './Date'\nimport EventContainer from './EventContainer'\nimport DisplayEvents from './DisplayEvents'\n\nexport default class Main extends Component {\n\n        constructor(props){\n            super(props)\n                this.state = {\n                    latitude: null,\n                    longitude: null,\n                    date: null,\n                    events: null,\n            }\n            this.getGeoFromAddress = this.getGeoFromAddress.bind(this)\n            this.getGeoFromGeoButton = this.getGeoFromGeoButton.bind(this)\n        }\n\n    getGeoFromGeoButton() {\n        navigator.geolocation.getCurrentPosition(position => this.setState({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n        }))\n    }\n\n    getGeoFromAddress(event) {\n        let message = document.querySelector('.addressMessage')\n        message.innerHTML = 'Getting results...'\n        event.preventDefault()\n        const addressParameter = event.target.searchBar.value\n        if (addressParameter.length > 0) {\n            fetch(`/searchAddress?q=${addressParameter}`)\n            .then(response => response.json())\n            .then(data => {\n                if (data.error) {\n                    alert(data.error)\n                } else {\n                    this.setState({\n                        latitude: data.lat,\n                        longitude: data.lng\n                    })\n                    message.innerHTML = ''\n                }\n            })\n        } else {\n            alert('Please enter an address.')\n        }\n    }\n\n    clickHandler = (event) => {\n        this.setState({\n            date: event.target.value\n        }) \n    }\n\n    getMetroAndEvents = () => {\n            if (!this.state.date && this.state.latitude) {\n                alert('Please choose a location and a date.')\n            } else {\n                fetch(`/getMetroAndEvents?location=${this.state.latitude},${this.state.longitude}&date=${this.state.date}`)\n                .then(response => response.json())\n                .then(data => {\n                    if (data.error) {\n                        alert(data.error)\n                    } else {\n                        let daysArray = this.breakUpByDay(data)\n                        this.sortEachDay(daysArray)\n                        this.setState({\n                            events: daysArray\n                        })\n                      }\n                    }\n                )}\n    }\n\n\n    // The first function to breaking the events up by day (sorted days) and then sorting the events on that day by closest distance to me.\n    // events is coming in as 50 event objects that are sorted by date closest to the one given by the user.\n    // when this function runs, it will return a new array of objects where each object holds all the events for that day\n    // example: [{}, {}, {}, {}] monday, tuesday, wednesday, thurs\n    // these new objects are given a new key 'date': '2020/3/15' and a key 'events': [{}, {}, {}, {}, {}, {}, {}]\n    breakUpByDay = (events) => {\n        let days = []\n        let left = 0\n        let right = 1\n        for (let item of events) {\n            item.distance = this.distance(this.state.latitude, this.state.longitude, item.venue.lat, item.venue.lng, 'N')\n            if (right >= events.length) {\n                let day = {}\n                day['date'] = events[left].start.date\n                day['events'] = events.slice(left, right)\n                days.push(day)\n            } else if (events[left].start.date !== events[right].start.date) {\n                let day = {}\n                day['date'] = events[left].start.date\n                day['events'] = events.slice(left, right)\n                left = right\n                right = right + 1\n                days.push(day)\n            } else {\n                right = right + 1\n            }\n        }\n        return days\n    }\n\n    // now that we transformed the data so it's easier to deal with, I can sort each day of events by closest distance to me. \n    sortEachDay = (daysArray) => {\n        for (let day of daysArray) {\n            day.events = day.events.sort((a, b) => {\n                if (a.distance === null) {\n                    return 1\n                } else if (b.distance === null) {\n                    return -1\n                }\n                return a.distance > b.distance ? 1 : -1\n            })\n        }\n    }\n\n    distance = (lat1, lon1, lat2, lon2, unit) => {\n        if ((lat1 === lat2) && (lon1 === lon2)) {\n            return 0;\n        } else if (lat2 == null) {\n            return null\n        } else {\n            var radlat1 = Math.PI * lat1/180;\n            var radlat2 = Math.PI * lat2/180;\n            var theta = lon1-lon2;\n            var radtheta = Math.PI * theta/180;\n            var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);\n            if (dist > 1) {\n                dist = 1;\n            }\n            dist = Math.acos(dist);\n            dist = dist * 180/Math.PI;\n            dist = dist * 60 * 1.1515;\n            if (unit===\"K\") { dist = dist * 1.609344 }\n            if (unit===\"N\") { dist = dist * 0.8684 }\n            return dist;\n        }\n    }\n\n    render() {\n        return (\n            <Router>\n                <div className='main'>\n                    <Switch>\n                        <Route path='/main'>\n                            <h3 className='findShowsTitle'>Find Shows Near Me.</h3>\n                            <Address getGeoFromAddress={this.getGeoFromAddress}\n                                    latitude={this.state.latitude} \n                                    longitude={this.state.longitude}\n                                    getGeoFromGeoButton={this.getGeoFromGeoButton}/>\n                            {this.state.latitude ?\n                            <Date getMetroAndEvents={this.getMetroAndEvents}\n                                clickHandler={this.clickHandler}\n                                date={this.state.date}\n                                lat={this.state.latitude}\n                                />\n                            : null}\n                        </Route>\n                            <Route path='/events' render={(props) => (<DisplayEvents {...props}  totalEvents={this.state.events} />)}/>\n                    </Switch>   \n                </div>\n            </Router>\n        )\n    }\n}\n","import React from 'react'\nimport {Link} from 'react-router-dom'\n\nexport default function () {\n    return (\n        <div className='landingPageDiv'>\n            <h1 className='welcomeInstructions'>You give us a <span className='welcomeLocation'>location</span> and a <span className='welcomeDate'>date</span></h1>\n            <h2 className='secondWelcomeInstruction'>We'll give you a list of concerts near <span className='welcomeYou'>you</span>.</h2>\n            <Link to='/main'>\n                <button className='launchButton'>See Shows</button>\n            </Link>\n        </div>\n    )\n}\n","import React from 'react'\nimport neighborhoodJamz from '../neighborhoodjamz2.png'\n\nexport default function Logo() {\n    return (\n        <div className='logoDiv'>\n            <img className='logo' alt='logo didnt make it' src={neighborhoodJamz}></img>\n        </div>\n    )\n}\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main'\nimport LandingPage from './components/LandingPage'\nimport Logo from './components/Logo'\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom'\n\n\nfunction App() {\n  return (\n    <Router>\n        <div className=\"App\">\n          <Logo />\n          <Switch>\n            <Route path='/' exact component={LandingPage} />\n            <Route path='/main' component={Main}/>\n          </Switch>\n        </div>\n    </Router>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}